name: Deploy to Google Cloud Run

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: "${{ inputs.working-dir }}"
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - id: auth
      name: Authenticate GCP Service Account
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.gcp-sa-key }}
        create_credentials_file: true
        cleanup_credentials: false

    - id: vars
      name: Set Short Git Commit SHA, copy credentials
      run: |
        shortSHA=$(git rev-parse --short ${{ github.sha }})
        echo "short_sha=$shortSHA" >> $GITHUB_OUTPUT
        cp ${{ steps.auth.outputs.credentials_file_path }} $GITHUB_WORKSPACE/${{ inputs.working-dir }}/gcp-sa-key.json
        echo "sa_key=./${{ inputs.working-dir }}/gcp-sa-key.json" >> $GITHUB_OUTPUT
        ls -lah $GITHUB_WORKSPACE/${{ inputs.working-dir }}/gcp-sa-key.json
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Registry
      uses: docker/login-action@v3
      with:
        registry: 'us-central1-docker.pkg.dev'
        username: _json_key
        password: ${{ secrets.gcp-sa-key }}

    - id: 'build'
      name: Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: "./${{ inputs.working-dir }}"
        file: "./${{ inputs.working-dir }}/${{ inputs.dockerfile }}"
        build-args: |
          GRAPHQL_URI=${{inputs.graphql-uri}}
          SCHEMA_URI=${{inputs.schema-uri}}
          SCHEMA_TOKEN=${{secrets.schema-token}}
          GATEWAY_GOOGLE_AUDIENCE=${{inputs.gateway-google-audience}}
          GOOGLE_APPLICATION_CREDENTIALS=./gcp-sa-key.json
          GOOGLE_ACCOUNT_TARGET=${{ secrets.iac-tf-manager-account }}
          ONGCE_OVERRIDE=1
        push: true
        tags: | 
          "us-central1-docker.pkg.dev/${{ inputs.gcp-project }}/internal/${{ inputs.image-name }}:${{ inputs.tag == '' && 'latest' || inputs.tag }}"
          "us-central1-docker.pkg.dev/${{ inputs.gcp-project }}/internal/${{ inputs.image-name }}:${{ steps.vars.outputs.short_sha }}"
    
  deploy:
    runs-on: ubuntu-22.04
    needs: build
    steps:

    - id: auth
      name: Authenticate GCP Service Account
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.gcp-sa-key }}
        cleanup_credentials: false
        
    - name: Deploy Docker Image to Cloud Run
      uses: google-github-actions/deploy-cloudrun@v2
      with:
        project_id: "${{ inputs.gcp-project }}"
        service: "${{ inputs.service-name }}"
        image: "us-central1-docker.pkg.dev/${{ inputs.gcp-project }}/internal/${{ inputs.image-name }}:${{ inputs.tag }}"
        tag: "latest"
        flags: "--service-account=${{ secrets.service-identity }} --impersonate-service-account=${{ secrets.iac-tf-manager-account }} --min-instances=${{ inputs.min-instances }}"
        env_vars: |
          GRAPHQL_URI=${{inputs.graphql-uri}}
          SCHEMA_URI=${{inputs.schema-uri}}
          SCHEMA_TOKEN=${{secrets.schema-token}}
          AUTH0_RETURN_TO_URL=${{inputs.auth0-return-to-url}}
          AUTH0_CALLBACK_URL=${{inputs.auth0-callback-url}}
          AUTH0_LOGOUT_RETURN_TO_URL=${{inputs.auth0-logout-return-to-url}}
          AUTH0_LOGOUT_URL=${{inputs.auth0-logout-url}}
          AUTH0_DOMAIN=${{inputs.auth0-domain}}
          AUTH0_CLIENT_ID=${{secrets.auth0-client-id}}
          AUTH0_CLIENT_SECRET=${{secrets.auth0-client-secret}}
          AUTH0_AUDIENCE=${{inputs.auth0-audience}}
          AUTH0_SCOPE=${{inputs.auth0-scope}}
          AUTH0_SECRET=${{secrets.auth0-secret}}
          AUTH0_EMAIL=${{inputs.auth0-email}}
          AUTH0_PASSWORD=${{secrets.auth0-password}}
          GATEWAY_GOOGLE_AUDIENCE=${{inputs.gateway-google-audience}}
          GRAPHAVIDER_HANDSHAKE_TOKEN=${{secrets.graphavider-handshake-token}}
          GRAPHAVIDER_ACCESS_TOKEN=${{secrets.graphavider-access-token}}
          GRAPHAVIDER_BASE_URL=${{inputs.graphavider-base-url}}
          GRAPHAVIDER_GOOGLE_AUDIENCE=${{inputs.graphavider-google-audience}}
          VAULT_BASE_URL=${{inputs.vault-base-url}}
          VAULT_GOOGLE_AUDIENCE=${{inputs.vault-google-audience}}
          AIRTABLE_API_KEY=${{secrets.airtable-api-key}}
          AIRTABLE_BASE_ID=${{inputs.airtable-base-id}}
          GITHUB_APP_ID=${{secrets.github-app-id}}
          GITHUB_APP_NAME=${{secrets.github-app-name}}
          GITHUB_APP_WEBHOOK_SECRET=${{secrets.github-app-webhook-secret}}
          GITHUB_APP_CLIENT_SECRET=${{secrets.github-app-client-secret}}
          GITHUB_APP_CLIENT_ID=${{secrets.github-app-client-id}}
          GITHUB_APP_PRIVATE_KEY=${{secrets.github-app-private-key}}
          GTM_ID=${{secrets.google-tag-manager-id}}
          COMMERCE_DATABASE_URL=${{secrets.commerce-database-url}}  
          MOVIES_DATABASE_URL=${{secrets.movies-database-url}}
          MUSIC_DATABASE_URL=${{secrets.music-database-url}}
          SHOWS_DATABASE_URL=${{secrets.shows-database-url}}
          SITE_DATABASE_URL=${{secrets.site-database-url}}
          CLONE_TEMPLATE_TOKEN=${{secrets.clone-template-token}}
          UPSTASH_KAFKA_URL=${{inputs.upstash-kafka-url}}
          UPSTASH_KAFKA_USERNAME=${{inputs.upstash-kafka-username}}
          UPSTASH_KAFKA_PASSWORD=${{secrets.upstash-kafka-password}}
          PUBLISH_PROJECT_TOPIC=${{inputs.publish-project-topic}}
          HEALTHCHECK_IDENTITY=${{inputs.healthcheck-identity}}

    - name: Update Traffic for Cloud Run Service
      uses: google-github-actions/deploy-cloudrun@v2
      with:
        project_id: "${{ inputs.gcp-project }}"
        service: "${{ inputs.service-name }}"
        tag_traffic: "latest=100"
        flags: "--impersonate-service-account=${{ secrets.iac-tf-manager-account }}"
